name: Sync cards from Google

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 * * * *'  # every hour

permissions:
  contents: write

concurrency:
  group: cards-sync-${{ github.ref }}
  cancel-in-progress: true

env:
  REPO_SLUG: Jrosai-dev/fundlibraries-campaigns
  AUTO_MOVE_LATEST: "true" 

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure repo is up to date
        run: |
          set -euo pipefail
          git fetch origin main
          git checkout main
          git reset --hard origin/main

      - name: Clean old versioned folders
        run: rm -rf public/campaigns.v-*

      - name: Build cards (canonical + versioned + index + per-slug + manifest + home + feeds pointers)
        run: node scripts/build_cards.js

      # Guardrails: forbid publishing @main or absolute self jsDelivr URLs in public/*.json
      - name: Guard â€” no @main or absolute self URLs in public
        run: |
          set -euo pipefail
          if grep -R "@main" public; then
            echo "Found @main in public outputs"
            exit 1
          fi
          if grep -R "cdn.jsdelivr.net/gh/${REPO_SLUG}@" public; then
            echo "Found absolute jsDelivr URLs pointing to this repo in public outputs"
            exit 1
          fi

      - name: Commit generated files
        id: commit
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A public
          if git diff --cached --quiet; then
            echo "No changes to commit"
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git commit -m "Update cards feed from Google"
          git push origin HEAD:main
          echo "changed=true" >> "$GITHUB_OUTPUT"

      # Legacy cache purges for consumers still reading @main
      - name: Purge jsDelivr caches (@main legacy)
        if: steps.commit.outputs.changed == 'true'
        run: |
          set -euo pipefail
          purge() { for i in 1 2 3; do curl -fsS "$1" && return 0 || sleep 2; done; return 1; }

          purge https://purge.jsdelivr.net/gh/${REPO_SLUG}@main/public/feeds.latest.json || true
          purge https://purge.jsdelivr.net/gh/${REPO_SLUG}@main/public/cards.latest.json || true

          purge https://purge.jsdelivr.net/gh/${REPO_SLUG}@main/public/campaigns.cards.min.json || true
          purge https://purge.jsdelivr.net/gh/${REPO_SLUG}@main/public/campaigns.index.min.json || true
          purge https://purge.jsdelivr.net/gh/${REPO_SLUG}@main/public/campaigns.home.min.json || true
          purge https://purge.jsdelivr.net/gh/${REPO_SLUG}@main/public/campaigns.manifest.json || true

          # If url_path exists, purge its @main location too (optional convenience)
          FILE_PATH=$(node -e "try{process.stdout.write((require('./public/cards.latest.json').url_path)||'')}catch(e){process.stdout.write('')}")
          if [ -n "$FILE_PATH" ]; then
            purge "https://purge.jsdelivr.net/gh/${REPO_SLUG}@main/public/$FILE_PATH" || true
          fi

      # Create a timestamped tag for this build (immutable)
      - name: Create and push timestamp tag
        if: steps.commit.outputs.changed == 'true'
        run: |
          set -euo pipefail
          TAG="v$(date -u +'%Y-%m-%d-%H%M')"
          echo "Tagging commit as $TAG"
          git tag -a "$TAG" -m "Automated build at $(date -u)"
          git push origin "$TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      # Optionally move 'latest' tag to this commit (auto-rollout)
      - name: Move latest tag (optional)
        if: steps.commit.outputs.changed == 'true' && env.AUTO_MOVE_LATEST == 'true'
        run: |
          set -euo pipefail
          git tag -f latest
          git push origin latest --force

      - name: Done
        run: echo "Sync finished."
